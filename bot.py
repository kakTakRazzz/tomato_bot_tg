from dotenv import load_dotenv
import os
import asyncio
import logging
import subprocess
import numpy as np
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from PIL import Image
import cv2
import imageio

load_dotenv()  
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
OUTPUT_DIR = "output"
os.makedirs(OUTPUT_DIR, exist_ok=True)

# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –ø–æ–º–∏–¥–æ—Ä–∞
TOMATO_WHOLE_PATH = "tomato_whole.png"    # –¶–µ–ª—ã–π –ø–æ–º–∏–¥–æ—Ä
TOMATO_EXPLODED_PATH = "tomato_exploded.png"  # –í–∑–æ—Ä–≤–∞–Ω–Ω—ã–π –ø–æ–º–∏–¥–æ—Ä

# –ü—É—Ç–∏ –∫ –∑–≤—É–∫–∞–º
WHOOSH_SOUND_PATH = "whoosh.mp3"    # –ó–≤—É–∫ –ø–æ–ª—ë—Ç–∞
BOOM_SOUND_PATH = "boom.mp3"        # –ó–≤—É–∫ –≤–∑—Ä—ã–≤–∞

logging.basicConfig(level=logging.INFO)


@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ!")


@dp.message(F.photo)
async def handle_photo(message: Message):
    if not message.photo:
        return

    await message.reply("‚è≥ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç–µ...")

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    file_path = file_info.file_path

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    downloaded_file = await bot.download_file(file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    input_photo_path = os.path.join(OUTPUT_DIR, f"{message.from_user.id}_input.jpg")
    with open(input_photo_path, 'wb') as f:
        f.write(downloaded_file.getvalue())

    # –ü—É—Ç—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    output_video_path = os.path.join(OUTPUT_DIR, f"{message.from_user.id}_output.mp4")

    try:
        # –°–æ–∑–¥–∞—ë–º –≤–∏–¥–µ–æ —Å –ª–µ—Ç—è—â–∏–º –ø–æ–º–∏–¥–æ—Ä–æ–º –∏ –∑–≤—É–∫–∞–º–∏
        create_flying_tomato_video(
            background_path=input_photo_path,
            tomato_whole_path=TOMATO_WHOLE_PATH,
            tomato_exploded_path=TOMATO_EXPLODED_PATH,
            whoosh_sound_path=WHOOSH_SOUND_PATH,
            boom_sound_path=BOOM_SOUND_PATH,
            output_path=output_video_path
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –≤–∏–¥–µ–æ
        video = FSInputFile(output_video_path)
        await bot.send_video(
            chat_id=message.chat.id,
            video=video,
            caption="–õ–æ–≤–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(input_photo_path)
        os.remove(output_video_path)

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")


def create_flying_tomato_video(background_path, tomato_whole_path, tomato_exploded_path, whoosh_sound_path, boom_sound_path, output_path):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω
    background = Image.open(background_path).convert("RGBA")
    bg_width, bg_height = background.size

    # –û–∫—Ä—É–≥–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–æ —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ libx264)
    bg_width = bg_width - (bg_width % 2)
    bg_height = bg_height - (bg_height % 2)
    background = background.resize((bg_width, bg_height), Image.LANCZOS)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ OpenCV –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏—Ü–∞
    background_cv = cv2.cvtColor(np.array(background), cv2.COLOR_RGBA2BGR)
    gray = cv2.cvtColor(background_cv, cv2.COLOR_BGR2GRAY)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å–∫–∞–¥ –¥–ª—è –ª–∏—Ü
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å: —Ü–µ–Ω—Ç—Ä –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
    if len(faces) > 0:
        x, y, w, h = faces[0]
        target_x = x + w // 2
        target_y = y + h // 2
        face_size = max(w, h)
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –ª–∏—Ü–æ! –¶–µ–ª—å: ({target_x}, {target_y}), —Ä–∞–∑–º–µ—Ä: {face_size}")
    else:
        target_x = bg_width // 2
        target_y = bg_height // 2
        face_size = min(bg_width, bg_height) // 3
        print("üòê –õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –õ–µ—Ç–∏–º –≤ —Ü–µ–Ω—Ç—Ä.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–∏–¥–æ—Ä–∞
    tomato_whole = Image.open(tomato_whole_path).convert("RGBA")
    tomato_exploded = Image.open(tomato_exploded_path).convert("RGBA")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    fps = 24
    flight_duration = 1.5  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—ë—Ç–∞
    freeze_duration = 2.0   # –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–µ—Ä–∂–∞—Ç—å "–≤–∑—Ä—ã–≤" –Ω–∞ –ª–∏—Ü–µ
    total_duration = flight_duration + freeze_duration
    total_output_frames = int(total_duration * fps)

    frames_for_video = []

    for i in range(total_output_frames):
        t = i / total_output_frames  # 0.0 ‚Üí 1.0 –ø–æ –≤—Å–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–π —Ñ–∞–∑–µ –º—ã: –ø–æ–ª—ë—Ç –∏–ª–∏ "–∑–∞–º–æ—Ä–æ–∑–∫–∞"
        if t <= (flight_duration / total_duration):
            # –§–∞–∑–∞ –ø–æ–ª—ë—Ç–∞
            progress = t / (flight_duration / total_duration)  # 0.0 ‚Üí 1.0 –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–∑—ã –ø–æ–ª—ë—Ç–∞
            tomato_frame = tomato_whole.copy()
        else:
            # –§–∞–∑–∞ "–∑–∞–º–æ—Ä–æ–∑–∫–∏" ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∑–æ—Ä–≤–∞–Ω–Ω—ã–π –ø–æ–º–∏–¥–æ—Ä
            progress = 1.0
            tomato_frame = tomato_exploded.copy()

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–º–∏–¥–æ—Ä –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—Ä–∞ –ª–∏—Ü–∞
        target_tomato_size = int(face_size * 1.2)  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å 1.2 ‚Äî –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
        original_max = max(tomato_frame.size)
        scale_factor = target_tomato_size / original_max
        new_width = int(tomato_frame.width * scale_factor)
        new_height = int(tomato_frame.height * scale_factor)
        tomato_frame = tomato_frame.resize((new_width, new_height), Image.LANCZOS)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–æ–Ω–∞
        frame_background = background.copy()

        # –ê–Ω–∏–º–∞—Ü–∏—è: –ø–æ–º–∏–¥–æ—Ä –ª–µ—Ç–∏—Ç —Å–Ω–∏–∑—É ‚Üí –≤ —Ü–µ–ª—å
        start_x = bg_width // 2 - new_width // 2
        start_y = bg_height + new_height  # –Ω–∞—á–∏–Ω–∞–µ–º –°–ù–ò–ó–£ —ç–∫—Ä–∞–Ω–∞
        x = int(start_x + (target_x - new_width // 2 - start_x) * progress)
        y = int(start_y + (target_y - new_height // 2 - start_y) * progress)

        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ–º–∏–¥–æ—Ä
        frame_background.paste(tomato_frame, (x, y), tomato_frame)
        frame_background = frame_background.convert("RGB")
        frames_for_video.append(np.array(frame_background))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
    temp_video_path = output_path.replace(".mp4", "_temp.mp4")
    imageio.mimwrite(temp_video_path, frames_for_video, fps=fps, codec='libx264', macro_block_size=None)

    # === –î–û–ë–ê–í–õ–Ø–ï–ú –ó–í–£–ö–ò –ß–ï–†–ï–ó FFMPEG ===
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–≤—É–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(whoosh_sound_path) or not os.path.exists(boom_sound_path):
        print("‚ö†Ô∏è –ó–≤—É–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞")
        os.rename(temp_video_path, output_path)
        return

    # –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É ffmpeg –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –∑–≤—É–∫–æ–≤
    cmd = [
        'ffmpeg',
        '-y',  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        '-i', temp_video_path,
        '-i', whoosh_sound_path,
        '-i', boom_sound_path,
        '-filter_complex',
        f'[1:a]adelay=0|0[a1];'  # whoosh –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É
        f'[2:a]adelay={int(flight_duration * 1000)}|{int(flight_duration * 1000)}[a2];'  # boom –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ flight_duration —Å–µ–∫—É–Ω–¥
        f'[a1][a2]amix=inputs=2:duration=longest[a]',
        '-map', '0:v',  # –≤–∏–¥–µ–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        '-map', '[a]',  # –∞—É–¥–∏–æ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        '-c:v', 'copy',  # –Ω–µ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ
        '-c:a', 'aac',  # –∫–æ–¥–µ–∫ –∞—É–¥–∏–æ
        '-shortest',    # –æ–±—Ä–µ–∑–∞—Ç—å –ø–æ —Å–∞–º–æ–º—É –∫–æ—Ä–æ—Ç–∫–æ–º—É –ø–æ—Ç–æ–∫—É
        output_path
    ]

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print("‚úÖ –ó–≤—É–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–≤—É–∫–∞: {e.stderr}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞
        os.rename(temp_video_path, output_path)
    except FileNotFoundError:
        print("‚ö†Ô∏è ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ ffmpeg.exe –ª–µ–∂–∏—Ç –≤ –ø–∞–ø–∫–µ —Å –±–æ—Ç–æ–º.")
        os.rename(temp_video_path, output_path)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if os.path.exists(temp_video_path):
        os.remove(temp_video_path)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())